# Tested and Updated: 2025/09/18
# by Kasper Arfman - Fully corrected version
# Fixed externally-managed-environment issue

name: Build APK
on: [push]

jobs:
  build-android:
    name: Build for Android
    runs-on: ubuntu-20.04  # Using Ubuntu 20.04 to avoid Python 3.12 issues
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y \
            git zip unzip openjdk-8-jdk python3-pip \
            autoconf libtool pkg-config zlib1g-dev \
            libncurses5-dev libncursesw5-dev libtinfo5 \
            cmake libffi-dev libssl-dev \
            build-essential ccache m4 libtool \
            libffi6 libncurses5 \
            python3-setuptools python3-venv

      - name: Create and activate virtual environment
        run: |
          python3 -m venv buildozer_venv
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/buildozer_venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/buildozer_venv/bin" >> $GITHUB_PATH

      - name: Install Python dependencies in virtual environment
        run: |
          source buildozer_venv/bin/activate
          python -m pip install --upgrade pip
          python -m pip install --upgrade wheel setuptools
          python -m pip install --upgrade Cython==0.29.33
          python -m pip install --upgrade buildozer
          python -m pip install --upgrade virtualenv

      - name: Setup Android environment variables
        run: |
          echo "JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64" >> $GITHUB_ENV
          echo "ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk" >> $GITHUB_ENV
          echo "NDK_HOME=$HOME/.buildozer/android/platform/android-ndk" >> $GITHUB_ENV

      - name: Create buildozer.spec if missing
        run: |
          source buildozer_venv/bin/activate
          if [ ! -f buildozer.spec ]; then
            buildozer init
            # Update buildozer.spec with basic Android settings
            sed -i 's/#android.permissions = INTERNET/android.permissions = INTERNET/' buildozer.spec
            sed -i 's/#android.api = 31/android.api = 31/' buildozer.spec
            sed -i 's/#android.minapi = 21/android.minapi = 21/' buildozer.spec
            sed -i 's/#android.ndk = 25b/android.ndk = 25b/' buildozer.spec
            sed -i 's/#android.sdk = 31/android.sdk = 31/' buildozer.spec
          fi

      - name: Accept Android SDK licenses
        run: |
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          mkdir -p "$ANDROID_HOME/licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_HOME/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_HOME/licenses/android-sdk-preview-license"

      - name: Build Android APK
        run: |
          source buildozer_venv/bin/activate
          export JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
          export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
          export ANDROID_SDK_ROOT=$HOME/.buildozer/android/platform/android-sdk
          export NDK_HOME=$HOME/.buildozer/android/platform/android-ndk
          export PATH=$JAVA_HOME/bin:$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools
          
          # Force reinstall pip packages to avoid conflicts
          python -m pip install --force-reinstall --upgrade pip setuptools wheel
          
          # Build with detailed logging
          buildozer -v android debug
        env:
          PYTHONUNBUFFERED: 1
          PIP_DISABLE_PIP_VERSION_CHECK: 1
          BUILDOZER_WARN_ON_ROOT: 0

      - name: List generated files
        if: always()
        run: |
          echo "=== Checking bin directory ==="
          ls -la bin/ || echo "No bin directory found"
          echo "=== Checking buildozer directory ==="
          find .buildozer -name "*.apk" -type f 2>/dev/null || echo "No APK files found in .buildozer"
          echo "=== Checking entire workspace ==="
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: android-apk
          path: |
            bin/*.apk
            .buildozer/android/platform/build-*/bin/*.apk
          if-no-files-found: warn

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-logs
          path: |
            .buildozer/android/logs/
            .buildozer/*.log
          retention-days: 7
          if-no-files-found: ignore
